#!/usr/bin/env node

const fs = require('fs');
const https = require('https');
const http = require('http');
const app = require('../app');
const debug = require('debug')('todos:server');
const { Server } = require('socket.io');
const { open } = require('sqlite');
const sqlite3 = require('sqlite3');
const readline = require('readline');
const { join } = require('node:path');
const session = require('express-session');
const passport = require('passport');
const express = require('express');
require('dotenv').config();
require('../passport-config')(passport);

// HTTPS Certificates
const privateKey = fs.readFileSync('../app/certificates/server.key', 'utf8');
const certificate = fs.readFileSync('../app/certificates/server.cert', 'utf8');
const credentials = { key: privateKey, cert: certificate };

// HTTP and HTTPS Servers
const httpServer = http.createServer(app);
const httpsServer = https.createServer(credentials, app);
const io = new Server(httpsServer);

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

async function main() {
    const db = await open({
        filename: '../var/db/chat.db',
        driver: sqlite3.Database,
    });

    await db.exec(`
        CREATE TABLE IF NOT EXISTS messages (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            client_offset TEXT UNIQUE,
            content TEXT,
            username TEXT,
            time TEXT,
            type TEXT
        );
    `);
    const sessionMiddleware = session({
        secret: process.env.SECRET_KEY || "changeit",
        resave: false,
        saveUninitialized: true,
    });

    app.use(sessionMiddleware);
    app.use(passport.initialize());
    app.use(passport.session());
    app.use(express.urlencoded({ extended: false }));

    app.get("/chat", (req, res) => {
        if (!req.user) {
            return res.redirect("/login");
        }
        res.render("chat", { user: req.user });
    });
    app.get("/login", (req, res) => {
        if (req.user) {
            return res.redirect("/");
        }
        res.render("login");
    });
    app.post(
        "/login",
        passport.authenticate("local", {
            successRedirect: "/",
            failureRedirect: "/login",
        })
    );

    io.on('connection', async (socket) => {
        const username = socket.handshake.query.username;
        const timestamp = new Date().toISOString();

        console.log(`${username} connected`);
        io.emit('user joined', username);

        try {
            const rows = await db.all('SELECT * FROM messages');
            const loadedMessages = rows.map(row => ({
                username: row.username,
                content: row.content,
                time: row.time,
            }));

            socket.emit('load messages', loadedMessages);
        } catch (err) {
            console.error("Error getting messages:", err);
        }

        socket.on('message', async (data) => {
            const { user, msg, time } = data;

            try {
                await db.run('INSERT INTO messages (username, content, type, time) VALUES (?, ?, ?, ?)', [user, msg, 'default', time]);
            } catch (err) {
                console.error("Error saving message:", err.message);
            }

            console.log(`<${user}> ${msg}`);
            io.emit('message', { user, msg });
        });

        socket.on('ping', () => {
            io.emit('pong');
        });
        socket.on('recorded ping', (ping) => {
            console.log(`Client from ${username} received ping of ${ping}`);
        });

        socket.on('disconnect', async () => {
            console.log(`${username} disconnected`);
            io.emit('user left', username);
        });
    });

    const rl = readline.createInterface({
        input: process.stdin,
        output: process.stdout,
    });

    rl.on('line', (input) => {
        console.log(`<Console> ${input}`);
        io.emit('message', { user: 'Console', msg: input });
    });
}

main();

httpsServer.listen(port, () => {
    console.log(`HTTPS Server running on port ${port}`);
});

httpServer.on('request', (req, res) => {
    res.writeHead(301, { Location: `https://${req.headers.host}${req.url}` });
    res.end();
});

httpServer.listen(80, () => {
    console.log('HTTP Server running on port 80 (redirecting to HTTPS)');
});

function normalizePort(val) {
    const port = parseInt(val, 10);
    return isNaN(port) ? val : (port >= 0 ? port : false);
}

function onError(error) {
    if (error.syscall !== 'listen') throw error;
    const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}
